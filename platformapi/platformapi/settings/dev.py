"""
Django settings for platformapi project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

import sys
sys.path.insert(0, str(BASE_DIR/"apps"))
sys.path.insert(0, str(BASE_DIR/"utils"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k-96en6cqo1m+-ffm=(+wl)(et$pz@0gp6xt(-!geq)#7%=!nt'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 允许客户端用任意域名访问该站点
ALLOWED_HOSTS = [
    "*"
]


# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'corsheaders',  # cors跨域子应用
    'ckeditor',  # 富文本编辑
    'ckeditor_uploader',  # 上传文件子应用
    'stdimage',  # 生成缩略图
    'haystack',  # 搜索引擎框架

    'home',
    'users',
    'courses',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'platformapi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / "templates" ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'platformapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'dj_db_conn_pool.backends.mysql',
        'NAME': 'commerce',
        'PORT': 3306,
        'HOST': 'localhost',
        'USER': 'commerce_user',
        'PASSWORD': '123',
        'POOL_OPTIONS': {
            'POOL_SIZE': 10,
            'MAX_OVERFLOW': 10,
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
# 静态文件目录
STATICFILES_DIRS = [
    str(BASE_DIR / "static"),
]

# 上传文件根目录
MEDIA_ROOT = BASE_DIR / "upload"
MEDIA_URL = '/upload/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': { # 日志格式设置
        'verbose': { # 详细格式
            # levelname 日志等级
            # asctime   发生时间
            # module    文件名
            # process   进程ID
            # thread    线程ID
            # message   异常信息
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{', # 变量格式分隔符
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {  # 过滤器
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': { # 日志处理流程
        'console': {
            'level': 'DEBUG', # 设置当前日志处理流程中的日志最低等级
            'filters': ['require_debug_true'], # 当前日志处理流程的日志过滤
            'class': 'logging.StreamHandler',  # 当前日志处理流程的核心类，StreamHandler可以帮我们把日志信息输出到终端下
            'formatter': 'simple'              # 当前日志处理流程的日志格式
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置
            'filename': BASE_DIR.parent / "logs/platform.log",
            # 单个日志文件的最大值
            'maxBytes': 300 * 1024 * 1024,
            # 备份日志文件的数量
            'backupCount': 10,
            # 日志格式:详细格式
            'formatter': 'verbose'
        },
    },
    'loggers': {  # 日志处理的命名空间
        'django': {
            'handlers': ['console','file'],
            'propagate': True,
        },
    }
}

CACHES = {
    # 默认缓存
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://:@127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 10},  # 连接池
        }
    },
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://:@127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 10},
        }
    },
    # 提供存储短信验证码
    "sms_code":{
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://:@127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 10},
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# haystack连接elasticsearch的配置信息
HAYSTACK_CONNECTIONS = {
    'default': {
        # haystack操作es的核心模块
        'ENGINE': 'haystack.backends.elasticsearch7_backend.Elasticsearch7SearchEngine',
        # es服务器地址
        'URL': 'http://127.0.0.1:9200/',
        # es索引仓库
        'INDEX_NAME': 'haystack',
    }
}

# mysqlORM操作数据库改变时自动更新es索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

REST_FRAMEWORK = {
    # 自定义异常处理
    'EXCEPTION_HANDLER': 'platformapi.utils.exceptions.custom_exception_handler',

    # 自定义认证
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # JWT认证
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    )
}

import datetime
JWT_AUTH = {
    # 设置JWT的有效期
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),
    # 自定义载荷
    'JWT_PAYLOAD_HANDLER': 'platformapi.utils.authenticate.jwt_payload_handler',
}

# 自定义系统认证采用的用户模型类
AUTH_USER_MODEL = 'users.User'

# 重写Django认证
AUTHENTICATION_BACKENDS = ['platformapi.utils.authenticate.CustomAuthBackend', ]

# 腾讯云配置
TENCENTCLOUD = {
    'SecretId':'<SecretId>',
    'SecretKey':'<SecretKey>',
    'Captcha':{
        'endpoint': 'captcha.tencentcloudapi.com',
        'CaptchaType': 9,
        'CaptchaAppId': '<CaptchaAppId>',  # 要去掉'单引号'写成int类型
        'AppSecretKey': '<AppSecretKey>',
    }
}

# 容联云短信配置
RONGLIANYUN = {
    'accId': '<accId>',
    'accToken': '<accToken>',
    'appId': '<appId>',
    'reg_tid': 1,  # 短信的模版ID
    'sms_expire': 300,  # 短信有效期
    'sms_interval': 60,  # 短信发送冷却时间
}

#  阿里云OSS云存储
OSS_ACCESS_KEY_ID = '<OssAccessKeyId>'
OSS_ACCESS_KEY_SECRET = '<OssAccessKeySecret>'
OSS_ENDPOINT = '<OssEndPoint>'  # 访问域名
OSS_BUCKET_NAME = '<OssBucketName>'  # oss创建的BUCKET名称
# 上传文件到oss服务器
DEFAULT_FILE_STORAGE = 'django_oss_storage.backends.OssMediaStorage'


# celery异步任务队列框架配置项
CELERY_BROKER_URL = 'redis://:@127.0.0.1:6379/14'
CELERY_RESULT_BACKEND = 'redis://:@127.0.0.1:6379/15'
# 时区, 与Django的时区同步
CELERY_TIMEZONE = TIME_ZONE
# 防止死锁
CELERY_FORCE_EXECV = True
# 设置并发的worker数量
CELERY_CONCURRENCY = 200
# 设置失败允许重试  如果设置为true, 必须在异步任务中指定重试次数
CELERY_ACKS_LATE = True
# 每个worker工作进程最多执行500个任务被销毁, 可防止内存泄漏
CELERY_MAX_TASKS_PER_CHILDREN = 500
# 单个任务的最大运行时间, 超时会被杀死
CELERY_TIME_LIMIT = 10 * 60
# 任务发出后, 经过一段时间未收到acknowledge, 就将任务重新交给其他worker执行
CELERY_DISABLE_RATE_LIMITS = True
# celery的任务结果内容格式
CELERY_ACCEPT_CONTENT = ['json', 'pickle']


CELERY_BEAT_SCHEDULE = {
    # 定时任务的注册标记符(必须唯一)
    'user-send_sms1': {
        # 定时任务的名称
        'task': 'send_sms1',
        # 定时任务的调用时间, 10表示每十秒调用一次add任务, 也可以用crontab设置
        'schedule': 10,
    }
}

# ckeditor富文本编辑器配置
# 上传文件的存储路径
CKEDITOR_UPLOAD_PATH = 'ckeditor/'
# 工具条配置
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',  # 自定义
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline', 'Image', 'Styles', 'Format', 'Font', 'FontSize',],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Ident', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink', 'Table'],
            ['RemoveFormat', 'Source'],
        ],
        # 编辑器高度
        'height': 120,
    }
}

# admin站点公共配置
from django.contrib import admin
admin.AdminSite.site_header = '在线教育'
admin.AdminSite.site_title = '站点管理'

# 登录界面logo
SIMPLEUI_LOGO = '/static/logo.jpg'
# 快速操作
SIMPLEUI_HOME_QUICK = True
# 服务器信息
SIMPLEUI_HOME_INFO = False
# simpleui内置的使用分析
SIMPLEUI_ANALYSIS = False
# 离线模式
SIMPLEUI_STATIC_OFFLINE = True
# 首页图标地址
SIMPLEUI_INDEX = 'http://www.platform.cn:3000/'